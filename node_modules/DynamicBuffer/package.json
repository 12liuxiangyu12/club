{
  "author": {
    "name": "Oliver Herdin"
  },
  "name": "DynamicBuffer",
  "description": "Dynamic buffers can be used for fast string concatenation. They are initialized with a fixed size node Buffer, which will be replaced with a larger one transparently when needed.",
  "version": "0.1.0",
  "homepage": "https://github.com/DDjarod/DynamicBuffer",
  "repository": {
    "type": "git",
    "url": "https://github.com/DDJarod/DynamicBuffer.git"
  },
  "engines": {
    "node": "~0.6.2"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "main": "./DynamicBuffer.js",
  "readme": "# DynamicBuffer, a wrapper around node.js Buffer class\n\nThe Buffer class of node.js by default cannot be used as buffer to concatenate strings, like StringBuilder known from java [http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html].\nThis module contains a wrapper around node.js Buffer to concatenate strings into a Buffer, while automatically creating larger Buffers in the background, if more space is needed.\n\n    /**\n     * constructor, takes a starting size for the underlying buffer\n     * and a factor, in which the buffer grows, if it gets to small.\n     * Both have defaults (512 and 2.0).\n     */\n    var DynamicBuffer = module.exports = function(_size, _factor)\n\n    /**\n     * append a string to the buffer and return it for chaining\n     */\n    DynamicBuffer.prototype.append = function(_string)\n\n    /**\n     * append a byte to the buffer and return it for chaining\n     */\n    DynamicBuffer.prototype.write = function(_byte)\n\n    /**\n     * append a javascript (V8) buffer or DynamicBuffer to this one\n     * and return it for chaining\n     */\n    DynamicBuffer.prototype.concat = function(_buffer)\n\n    /**\n     * get a copy of this DynamicBuffer. Changing one of the buffers does\n     * not change the other one. Will accept an optional size for the copy.\n     * If not given, the new one will be exactly the same as the original.\n     */\n    DynamicBuffer.prototype.clone = function(_newBufferSize, _newResizeFactor)\n\n    /**\n     * shrinks this buffer either to the given size, or the length of the current buffer.\n     * This method is mainly used to squeeze out the last bytes of memory, or increase the\n     * size for large chunks of data to come\n     */\n    DynamicBuffer.prototype.resizeUnderlyingBuffer = function(_size)\n\n    /**\n     * return a view of the underlying buffer that only contains the written space.\n     * Changing that view will change this buffer, too.\n     */\n    DynamicBuffer.prototype.getBuffer = function()",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/DDJarod/DynamicBuffer/issues"
  },
  "_id": "DynamicBuffer@0.1.0",
  "_shasum": "d9c673267dc845d7e0717db6dbfc1b1f8bfc9df7",
  "_from": "DynamicBuffer@",
  "_resolved": "https://registry.npmjs.org/DynamicBuffer/-/DynamicBuffer-0.1.0.tgz"
}
